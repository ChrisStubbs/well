// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PH.Well.BDD.Features.Pages
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Administration Parameters")]
    [NUnit.Framework.CategoryAttribute("WebDriverFeature")]
    [NUnit.Framework.CategoryAttribute("RoleSuperUser")]
    public partial class AdministrationParametersFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AdminParameters.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Administration Parameters", @"	In order to parameterise the well
	As a user
	I want to be able to set seasonal dates so that clean deliveries take these dates into account when getting cleared from the well
	And I want to be able to set credit threshold per branch
	And I want to be able to set the time clean deliveries are cleaned from the well", ProgrammingLanguage.CSharp, new string[] {
                        "WebDriverFeature",
                        "RoleSuperUser"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Seasonal dates applied all branches")]
        public virtual void SeasonalDatesAppliedAllBranches()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Seasonal dates applied all branches", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
 testRunner.And("I have loaded the Adam route data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("I have selected branch 22", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("All the deliveries are marked as clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And("The clean deliveries are \'-2\' days old", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.And("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "FromDate",
                        "ToDate"});
            table1.AddRow(new string[] {
                        "New Year",
                        "-5",
                        "0"});
#line 18
 testRunner.When("I add a seasonal date", ((string)(null)), table1, "When ");
#line 21
 testRunner.And("all branches are selected for the seasonal date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.And("I save the seasonal date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "FromDate",
                        "ToDate",
                        "Branches"});
            table2.AddRow(new string[] {
                        "New Year",
                        "-5",
                        "0",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
#line 23
 testRunner.Then("the seasonal date is saved", ((string)(null)), table2, "Then ");
#line 26
 testRunner.When("The clean task runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.And("I open the clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.Then("\'10\' rows of clean delivery data will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 29
 testRunner.When("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "FromDate",
                        "ToDate"});
            table3.AddRow(new string[] {
                        "New Year",
                        "-5",
                        "-2"});
#line 30
 testRunner.And("I edit a seasonal date", ((string)(null)), table3, "And ");
#line 33
 testRunner.And("I update the seasonal date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "FromDate",
                        "ToDate",
                        "Branches"});
            table4.AddRow(new string[] {
                        "New Year",
                        "-5",
                        "-2",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
#line 34
 testRunner.Then("the seasonal date is updated with id \'2\'", ((string)(null)), table4, "Then ");
#line 37
 testRunner.When("The clean task runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.And("I open the clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.Then("No clean deliveries will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Seasonal dates applied one branch")]
        public virtual void SeasonalDatesAppliedOneBranch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Seasonal dates applied one branch", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
 testRunner.And("I have loaded the Adam route data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.And("I have selected branches \'22\' and \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.And("All the deliveries are marked as clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.And("\'2\' clean deliveries are updated to branch \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.And("The clean deliveries are \'-3\' days old", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
 testRunner.When("I open the clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
 testRunner.Then("\'10\' rows of clean delivery data will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 51
 testRunner.When("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "FromDate",
                        "ToDate"});
            table5.AddRow(new string[] {
                        "New Year",
                        "-5",
                        "0"});
#line 52
 testRunner.And("I add a seasonal date", ((string)(null)), table5, "And ");
#line 55
 testRunner.And("\'Medway\' is selected for the seasonal date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
 testRunner.And("I save the seasonal date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "FromDate",
                        "ToDate",
                        "Branches"});
            table6.AddRow(new string[] {
                        "New Year",
                        "-5",
                        "0",
                        "med"});
#line 57
 testRunner.Then("the seasonal date is saved", ((string)(null)), table6, "Then ");
#line 60
 testRunner.When("The clean task runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 61
 testRunner.And("I open the clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.Then("At least \'1\' rows of clean delivery data will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 63
 testRunner.When("I navigate to the branches page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 64
 testRunner.And("I deselect branch \'Medway\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.And("I save my branches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
 testRunner.And("I open the clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.Then("No clean deliveries will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 68
 testRunner.When("I navigate to the branches page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 69
 testRunner.And("I deselect branch \'Medway\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
 testRunner.And("I select branch \'Birtley\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.And("I save my branches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.And("I open the clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
 testRunner.Then("At least \'1\' rows of clean delivery data will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 74
 testRunner.When("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.And("I select the seasonal dates tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.And("I remove the seasonal date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.Then("it is removed from the seasonal date grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 78
 testRunner.When("The clean task runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 79
 testRunner.And("I open the clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
 testRunner.Then("No clean deliveries will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Seasonal dates negative inputs")]
        public virtual void SeasonalDatesNegativeInputs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Seasonal dates negative inputs", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line 83
 testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 84
 testRunner.And("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.When("I open the seasonal date input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 86
 testRunner.And("I save the seasonal date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table7.AddRow(new string[] {
                        "Description is required!"});
            table7.AddRow(new string[] {
                        "From date is required!"});
            table7.AddRow(new string[] {
                        "To date is required!"});
            table7.AddRow(new string[] {
                        "Select a branch!"});
#line 87
 testRunner.Then("warnings appear in the seasonal input page", ((string)(null)), table7, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "FromDate",
                        "ToDate"});
            table8.AddRow(new string[] {
                        "test",
                        "aaa",
                        "aaa"});
#line 93
 testRunner.When("I change the seasonal date", ((string)(null)), table8, "When ");
#line 96
 testRunner.And("I save the seasonal date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table9.AddRow(new string[] {
                        "From date is not a valid date!"});
            table9.AddRow(new string[] {
                        "To date is not a valid date!"});
            table9.AddRow(new string[] {
                        "Select a branch!"});
#line 97
 testRunner.Then("warnings appear in the seasonal input page", ((string)(null)), table9, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "FromDate",
                        "ToDate"});
            table10.AddRow(new string[] {
                        "test",
                        "01012016",
                        "01012016"});
#line 102
 testRunner.When("I change the seasonal date", ((string)(null)), table10, "When ");
#line 105
 testRunner.And("I save the seasonal date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table11.AddRow(new string[] {
                        "From date is not a valid date!"});
            table11.AddRow(new string[] {
                        "To date is not a valid date!"});
            table11.AddRow(new string[] {
                        "Select a branch!"});
#line 106
 testRunner.Then("warnings appear in the seasonal input page", ((string)(null)), table11, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "FromDate",
                        "ToDate"});
            table12.AddRow(new string[] {
                        "test",
                        "2016/01/31",
                        "2016/31/01"});
#line 111
 testRunner.When("I change the seasonal date", ((string)(null)), table12, "When ");
#line 114
 testRunner.And("I save the seasonal date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table13.AddRow(new string[] {
                        "To date is not a valid date!"});
            table13.AddRow(new string[] {
                        "Select a branch!"});
#line 115
 testRunner.Then("warnings appear in the seasonal input page", ((string)(null)), table13, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "FromDate",
                        "ToDate"});
            table14.AddRow(new string[] {
                        "test",
                        "29/02/2016",
                        "-1"});
#line 119
 testRunner.When("I change the seasonal date", ((string)(null)), table14, "When ");
#line 122
 testRunner.And("I save the seasonal date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table15.AddRow(new string[] {
                        "To date is not a valid date!"});
            table15.AddRow(new string[] {
                        "Select a branch!"});
#line 123
 testRunner.Then("warnings appear in the seasonal input page", ((string)(null)), table15, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "FromDate",
                        "ToDate"});
            table16.AddRow(new string[] {
                        "test",
                        "29/02/2016",
                        "30/03/2016"});
#line 127
 testRunner.When("I change the seasonal date", ((string)(null)), table16, "When ");
#line 130
 testRunner.And("all branches are selected for the seasonal date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
 testRunner.And("the seasonal dates page is closed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
 testRunner.Then("the seasonal dates are not saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit threshold add new")]
        public virtual void CreditThresholdAddNew()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit threshold add new", ((string[])(null)));
#line 135
this.ScenarioSetup(scenarioInfo);
#line 136
 testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 137
 testRunner.And("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Threshold"});
            table17.AddRow(new string[] {
                        "Level1",
                        "1000"});
#line 138
 testRunner.When("I add a credit threshold", ((string)(null)), table17, "When ");
#line 141
 testRunner.And("all branches are selected for the credit threshold", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
 testRunner.And("I save the credit threshold", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Threshold",
                        "Branches"});
            table18.AddRow(new string[] {
                        "Level 1",
                        "1000",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
#line 143
 testRunner.Then("the credit threshold is saved", ((string)(null)), table18, "Then ");
#line 146
 testRunner.And("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
 testRunner.When("I select the credit threshold tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Threshold",
                        "Branches"});
            table19.AddRow(new string[] {
                        "Level 1",
                        "1000",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
#line 148
 testRunner.Then("the credit threshold is saved", ((string)(null)), table19, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit threshold remove")]
        public virtual void CreditThresholdRemove()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit threshold remove", ((string[])(null)));
#line 152
this.ScenarioSetup(scenarioInfo);
#line 153
 testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 154
 testRunner.And("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Threshold"});
            table20.AddRow(new string[] {
                        "Level1",
                        "1000"});
#line 155
 testRunner.When("I add a credit threshold", ((string)(null)), table20, "When ");
#line 158
 testRunner.And("all branches are selected for the seasonal date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 159
 testRunner.And("I save the credit threshold", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Threshold",
                        "Branches"});
            table21.AddRow(new string[] {
                        "Level 1",
                        "1000",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
#line 160
 testRunner.Then("the credit threshold is saved", ((string)(null)), table21, "Then ");
#line 163
 testRunner.When("I remove the credit threshold", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 164
 testRunner.Then("it is removed from the credit threshold grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit threshold edit")]
        public virtual void CreditThresholdEdit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit threshold edit", ((string[])(null)));
#line 166
this.ScenarioSetup(scenarioInfo);
#line 167
 testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 168
 testRunner.And("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Threshold"});
            table22.AddRow(new string[] {
                        "Level1",
                        "1000"});
#line 169
 testRunner.When("I add a credit threshold", ((string)(null)), table22, "When ");
#line 172
 testRunner.And("all branches are selected for the seasonal date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 173
 testRunner.And("I save the credit threshold", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Threshold",
                        "Branches"});
            table23.AddRow(new string[] {
                        "Level 1",
                        "1000",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
#line 174
 testRunner.Then("the credit threshold is saved", ((string)(null)), table23, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Threshold"});
            table24.AddRow(new string[] {
                        "2000"});
#line 177
 testRunner.When("I edit a credit threshold", ((string)(null)), table24, "When ");
#line 180
 testRunner.And("I update the credit threshold", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Threshold",
                        "Branches"});
            table25.AddRow(new string[] {
                        "Level 1",
                        "2000",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
#line 181
 testRunner.Then("the credit threshold is updated with id \'2\'", ((string)(null)), table25, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit threshold applied all levels")]
        public virtual void CreditThresholdAppliedAllLevels()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit threshold applied all levels", ((string[])(null)));
#line 185
this.ScenarioSetup(scenarioInfo);
#line 186
 testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 189
 testRunner.When("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 190
 testRunner.And("I select the credit threshold tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Threshold"});
            table26.AddRow(new string[] {
                        "1",
                        "1000"});
#line 191
 testRunner.And("I add a credit threshold", ((string)(null)), table26, "And ");
#line 194
 testRunner.And("all branches are selected for the credit threshold", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
 testRunner.And("I save the credit threshold", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Threshold",
                        "Branches"});
            table27.AddRow(new string[] {
                        "Level 1",
                        "1000",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
#line 196
 testRunner.Then("the credit threshold is saved", ((string)(null)), table27, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Threshold"});
            table28.AddRow(new string[] {
                        "2",
                        "100"});
#line 199
 testRunner.When("I add a credit threshold", ((string)(null)), table28, "When ");
#line 202
 testRunner.And("all branches are selected for the credit threshold", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 203
 testRunner.And("I save the credit threshold", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Threshold",
                        "Branches"});
            table29.AddRow(new string[] {
                        "Level 1",
                        "1000",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
            table29.AddRow(new string[] {
<<<<<<< master
                        "Level 2",
                        "100",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
#line 204
 testRunner.Then("the credit threshold is saved", ((string)(null)), table29, "Then ");
=======
                        "Branch is required!"});
#line 197
 testRunner.Then("warnings appear on the credit threshold page", ((string)(null)), table29, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Threshold"});
            table30.AddRow(new string[] {
                        "1",
                        "10"});
#line 201
 testRunner.When("I change the credit threshold", ((string)(null)), table30, "When ");
#line 204
 testRunner.And("I save the credit threshold", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table31.AddRow(new string[] {
                        "Branch is required!"});
#line 205
 testRunner.Then("warnings appear on the credit threshold page", ((string)(null)), table31, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit threshold applied all levels")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void CreditThresholdAppliedAllLevels()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credit threshold applied all levels", new string[] {
                        "Ignore"});
#line 210
this.ScenarioSetup(scenarioInfo);
#line 211
 testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 212
 testRunner.And("I have loaded the Adam route data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 213
 testRunner.And("I have imported a valid Epod update file named \'ePOD_30062016_Update.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
 testRunner.And("3 deliveries have been marked as exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
 testRunner.When("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 217
 testRunner.And("I select the credit threshold tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Threshold"});
            table32.AddRow(new string[] {
                        "1",
                        "1000"});
#line 218
 testRunner.And("I add a credit threshold", ((string)(null)), table32, "And ");
#line 221
 testRunner.And("all branches are selected for the credit threshold", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 222
 testRunner.And("I save the credit threshold", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Threshold",
                        "Branches"});
            table33.AddRow(new string[] {
                        "Level 1",
                        "1000",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
#line 223
 testRunner.Then("the credit threshold is saved", ((string)(null)), table33, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Threshold"});
            table34.AddRow(new string[] {
                        "2",
                        "100"});
#line 226
 testRunner.When("I add a credit threshold", ((string)(null)), table34, "When ");
#line 229
 testRunner.And("all branches are selected for the credit threshold", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 230
 testRunner.And("I save the credit threshold", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Threshold",
                        "Branches"});
            table35.AddRow(new string[] {
                        "Level 1",
                        "1000",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
            table35.AddRow(new string[] {
                        "Level 2",
                        "100",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
#line 231
 testRunner.Then("the credit threshold is saved", ((string)(null)), table35, "Then ");
>>>>>>> local
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Threshold"});
            table30.AddRow(new string[] {
                        "3",
                        "10"});
<<<<<<< master
#line 208
 testRunner.When("I add a credit threshold", ((string)(null)), table30, "When ");
#line 211
 testRunner.And("all branches are selected for the credit threshold", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 212
=======
#line 235
 testRunner.When("I add a credit threshold", ((string)(null)), table36, "When ");
#line 238
 testRunner.And("all branches are selected for the credit threshold", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 239
>>>>>>> local
 testRunner.And("I save the credit threshold", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Threshold",
                        "Branches"});
            table31.AddRow(new string[] {
                        "Level 1",
                        "1000",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
            table31.AddRow(new string[] {
                        "Level 2",
                        "100",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
            table31.AddRow(new string[] {
                        "Level 3",
                        "10",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
<<<<<<< master
#line 213
 testRunner.Then("the credit threshold is saved", ((string)(null)), table31, "Then ");
#line 218
 testRunner.When("I navigate to the branches page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 219
 testRunner.And("I select all the branches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 220
 testRunner.And("I save the branch selection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 221
 testRunner.Then("all the branches are saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 222
 testRunner.When("I navigate to the user threshold levels page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 223
 testRunner.And("I search for the current user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 224
 testRunner.And("I select the current user from the results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 225
 testRunner.And("I select Level \'1\' from the dropdown list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 226
 testRunner.And("save the user threshold level", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 227
 testRunner.Then("the threshold level is saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 228
 testRunner.When("I open the exception deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
=======
#line 240
 testRunner.Then("the credit threshold is saved", ((string)(null)), table37, "Then ");
#line 245
 testRunner.When("I navigate to the branches page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 246
 testRunner.And("I select all the branches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 247
 testRunner.And("I save the branch selection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 248
 testRunner.Then("all the branches are saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 249
 testRunner.When("I navigate to the user threshold levels page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 250
 testRunner.And("I search for the current user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 251
 testRunner.And("I select the current user from the results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 252
 testRunner.And("I select Level \'2\' from the dropdown list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 253
 testRunner.And("save the user threshold level", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 254
 testRunner.Then("the threshold level is saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 255
 testRunner.When("I open the exception deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 256
 testRunner.When("I assign the delivery on row 1 to myself", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
>>>>>>> local
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clean parameters applied all branches")]
        public virtual void CleanParametersAppliedAllBranches()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clean parameters applied all branches", ((string[])(null)));
<<<<<<< master
#line 251
this.ScenarioSetup(scenarioInfo);
#line 253
  testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 254
 testRunner.And("I have loaded the Adam route data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 255
 testRunner.And("I have selected branch 22", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 256
 testRunner.And("All the deliveries are marked as clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 257
 testRunner.And("The clean deliveries are \'-2\' days old", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 258
 testRunner.When("I open the clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 259
 testRunner.Then("\'10\' rows of clean delivery data will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 260
=======
#line 277
this.ScenarioSetup(scenarioInfo);
#line 279
  testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 280
 testRunner.And("I have loaded the Adam route data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 281
 testRunner.And("I have selected branch \'22\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 282
 testRunner.And("All the deliveries are marked as clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 283
 testRunner.And("The clean deliveries are \'-2\' days old", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 284
 testRunner.When("I open the clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 285
 testRunner.Then("\'10\' rows of clean delivery data will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 286
>>>>>>> local
 testRunner.When("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days"});
            table32.AddRow(new string[] {
                        "3"});
<<<<<<< master
#line 261
 testRunner.And("I add a clean parameter", ((string)(null)), table32, "And ");
#line 264
 testRunner.And("all branches are selected for the clean parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 265
=======
#line 287
 testRunner.And("I add a clean parameter", ((string)(null)), table38, "And ");
#line 290
 testRunner.And("all branches are selected for the clean parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 291
>>>>>>> local
 testRunner.And("I save the clean parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days",
                        "Branches"});
            table33.AddRow(new string[] {
                        "3",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
<<<<<<< master
#line 266
 testRunner.Then("the clean parameter is saved", ((string)(null)), table33, "Then ");
#line 269
 testRunner.When("The clean task runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 270
 testRunner.And("I open the clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 271
 testRunner.Then("\'10\' rows of clean delivery data will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 272
 testRunner.When("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 273
=======
#line 292
 testRunner.Then("the clean parameter is saved", ((string)(null)), table39, "Then ");
#line 295
 testRunner.When("The clean task runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 296
 testRunner.And("I open the clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 297
 testRunner.Then("\'10\' rows of clean delivery data will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 298
 testRunner.When("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 299
>>>>>>> local
 testRunner.And("I select the clean parameter tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days"});
            table34.AddRow(new string[] {
                        "2"});
<<<<<<< master
#line 274
 testRunner.And("I edit a clean parameter", ((string)(null)), table34, "And ");
#line 277
=======
#line 300
 testRunner.And("I edit a clean parameter", ((string)(null)), table40, "And ");
#line 303
>>>>>>> local
 testRunner.And("I update the clean parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days",
                        "Branches"});
            table35.AddRow(new string[] {
                        "2",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
<<<<<<< master
#line 278
 testRunner.Then("the clean parameter is updated with id \'2\'", ((string)(null)), table35, "Then ");
#line 281
 testRunner.When("The clean task runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 282
 testRunner.And("I open the clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 283
=======
#line 304
 testRunner.Then("the clean parameter is updated with id \'2\'", ((string)(null)), table41, "Then ");
#line 307
 testRunner.When("The clean task runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 308
 testRunner.And("I open the clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 309
>>>>>>> local
 testRunner.Then("the clean deliveries are removed from the well", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clean parameters applied one branch")]
        public virtual void CleanParametersAppliedOneBranch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clean parameters applied one branch", ((string[])(null)));
<<<<<<< master
#line 285
this.ScenarioSetup(scenarioInfo);
#line 287
 testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 288
 testRunner.And("I have loaded the Adam route data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 289
 testRunner.And("I have selected branches \'2\' and \'22\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 290
 testRunner.And("All the deliveries are marked as clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 291
 testRunner.And("The clean deliveries are \'-2\' days old", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 292
 testRunner.And("\'2\' clean deliveries are updated to branch \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 293
 testRunner.When("I open the clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 294
 testRunner.Then("\'10\' rows of clean delivery data will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 295
=======
#line 311
this.ScenarioSetup(scenarioInfo);
#line 313
 testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 314
 testRunner.And("I have loaded the Adam route data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 315
 testRunner.And("I have selected branches \'2\' and \'22\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 316
 testRunner.And("All the deliveries are marked as clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 317
 testRunner.And("The clean deliveries are \'-2\' days old", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 318
 testRunner.And("\'2\' clean deliveries are updated to branch \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 319
 testRunner.When("I open the clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 320
 testRunner.Then("\'10\' rows of clean delivery data will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 321
>>>>>>> local
 testRunner.When("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days"});
            table36.AddRow(new string[] {
                        "3"});
<<<<<<< master
#line 296
 testRunner.And("I add a clean parameter", ((string)(null)), table36, "And ");
#line 299
 testRunner.And("\'Medway\' is selected for the clean parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 300
=======
#line 322
 testRunner.And("I add a clean parameter", ((string)(null)), table42, "And ");
#line 325
 testRunner.And("\'Medway\' is selected for the clean parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 326
>>>>>>> local
 testRunner.And("I save the clean parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days",
                        "Branches"});
            table37.AddRow(new string[] {
                        "3",
                        "med"});
<<<<<<< master
#line 301
 testRunner.Then("the clean parameter is saved", ((string)(null)), table37, "Then ");
#line 304
 testRunner.When("The clean task runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 305
 testRunner.And("I navigate to the branches page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 306
 testRunner.And("I deselect branch \'Medway\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 307
 testRunner.And("I save my branches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 308
 testRunner.And("I open the clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 309
 testRunner.Then("No clean deliveries will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 310
 testRunner.When("I navigate to the branches page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 311
 testRunner.And("I select branch \'Medway\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 312
 testRunner.And("I deselect branch \'Birtley\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 313
 testRunner.And("I save my branches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 314
 testRunner.And("I open the clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 315
 testRunner.Then("At least \'1\' rows of clean delivery data will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 316
 testRunner.When("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 317
 testRunner.And("I select the clean parameter tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 318
 testRunner.And("I remove the clean parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 319
 testRunner.Then("it is removed from the clean parameter grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 320
 testRunner.When("The clean task runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 321
 testRunner.And("I open the clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 322
=======
#line 327
 testRunner.Then("the clean parameter is saved", ((string)(null)), table43, "Then ");
#line 330
 testRunner.When("The clean task runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 331
 testRunner.And("I navigate to the branches page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 332
 testRunner.And("I deselect branch \'Medway\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 333
 testRunner.And("I save my branches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 334
 testRunner.And("I open the clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 335
 testRunner.Then("No clean deliveries will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 336
 testRunner.When("I navigate to the branches page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 337
 testRunner.And("I select branch \'Medway\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 338
 testRunner.And("I deselect branch \'Birtley\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 339
 testRunner.And("I save my branches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 340
 testRunner.And("I open the clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 341
 testRunner.Then("At least \'1\' rows of clean delivery data will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 342
 testRunner.When("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 343
 testRunner.And("I select the clean parameter tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 344
 testRunner.And("I remove the clean parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 345
 testRunner.Then("it is removed from the clean parameter grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 346
 testRunner.When("The clean task runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 347
 testRunner.And("I open the clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 348
>>>>>>> local
 testRunner.Then("No clean deliveries will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clean parameter negative inputs")]
        public virtual void CleanParameterNegativeInputs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clean parameter negative inputs", ((string[])(null)));
<<<<<<< master
#line 324
this.ScenarioSetup(scenarioInfo);
#line 325
 testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 326
 testRunner.And("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 327
 testRunner.When("I select the clean parameter tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 328
 testRunner.And("I click the add parameter button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 329
=======
#line 350
this.ScenarioSetup(scenarioInfo);
#line 351
 testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 352
 testRunner.And("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 353
 testRunner.When("I select the clean parameter tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 354
 testRunner.And("I click the add parameter button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 355
>>>>>>> local
 testRunner.And("I save the clean parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table38.AddRow(new string[] {
                        "Days is required!"});
            table38.AddRow(new string[] {
                        "Branch is required!"});
<<<<<<< master
#line 330
 testRunner.Then("warnings appear on the clean input page", ((string)(null)), table38, "Then ");
=======
#line 356
 testRunner.Then("warnings appear on the clean input page", ((string)(null)), table44, "Then ");
>>>>>>> local
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days"});
            table39.AddRow(new string[] {
                        "0"});
<<<<<<< master
#line 334
 testRunner.When("I update clean parameter values", ((string)(null)), table39, "When ");
#line 337
=======
#line 360
 testRunner.When("I update clean parameter values", ((string)(null)), table45, "When ");
#line 363
>>>>>>> local
 testRunner.And("I save the clean parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table40.AddRow(new string[] {
                        "Days range is 1 to 100!"});
            table40.AddRow(new string[] {
                        "Branch is required!"});
<<<<<<< master
#line 338
 testRunner.Then("warnings appear on the clean input page", ((string)(null)), table40, "Then ");
=======
#line 364
 testRunner.Then("warnings appear on the clean input page", ((string)(null)), table46, "Then ");
>>>>>>> local
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days"});
            table41.AddRow(new string[] {
                        "101"});
<<<<<<< master
#line 342
 testRunner.When("I update clean parameter values", ((string)(null)), table41, "When ");
#line 345
=======
#line 368
 testRunner.When("I update clean parameter values", ((string)(null)), table47, "When ");
#line 371
>>>>>>> local
 testRunner.And("I save the clean parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table42.AddRow(new string[] {
                        "Days range is 1 to 100!"});
            table42.AddRow(new string[] {
                        "Branch is required!"});
<<<<<<< master
#line 346
 testRunner.Then("warnings appear on the clean input page", ((string)(null)), table42, "Then ");
=======
#line 372
 testRunner.Then("warnings appear on the clean input page", ((string)(null)), table48, "Then ");
>>>>>>> local
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days"});
            table43.AddRow(new string[] {
                        "-1"});
<<<<<<< master
#line 350
 testRunner.When("I update clean parameter values", ((string)(null)), table43, "When ");
#line 353
=======
#line 376
 testRunner.When("I update clean parameter values", ((string)(null)), table49, "When ");
#line 379
>>>>>>> local
 testRunner.And("I save the clean parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table44.AddRow(new string[] {
                        "Days range is 1 to 100!"});
            table44.AddRow(new string[] {
                        "Branch is required!"});
<<<<<<< master
#line 354
 testRunner.Then("warnings appear on the clean input page", ((string)(null)), table44, "Then ");
=======
#line 380
 testRunner.Then("warnings appear on the clean input page", ((string)(null)), table50, "Then ");
>>>>>>> local
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days"});
            table45.AddRow(new string[] {
                        "abc"});
<<<<<<< master
#line 358
 testRunner.When("I update clean parameter values", ((string)(null)), table45, "When ");
#line 361
=======
#line 384
 testRunner.When("I update clean parameter values", ((string)(null)), table51, "When ");
#line 387
>>>>>>> local
 testRunner.And("I save the clean parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table46.AddRow(new string[] {
                        "Days is required!"});
            table46.AddRow(new string[] {
                        "Branch is required!"});
<<<<<<< master
#line 362
 testRunner.Then("warnings appear on the clean input page", ((string)(null)), table46, "Then ");
=======
#line 388
 testRunner.Then("warnings appear on the clean input page", ((string)(null)), table52, "Then ");
>>>>>>> local
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days"});
            table47.AddRow(new string[] {
                        "1"});
<<<<<<< master
#line 366
 testRunner.When("I update clean parameter values", ((string)(null)), table47, "When ");
#line 369
=======
#line 392
 testRunner.When("I update clean parameter values", ((string)(null)), table53, "When ");
#line 395
>>>>>>> local
 testRunner.And("I save the clean parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table48.AddRow(new string[] {
                        "Branch is required!"});
<<<<<<< master
#line 370
 testRunner.Then("warnings appear on the clean input page", ((string)(null)), table48, "Then ");
=======
#line 396
 testRunner.Then("warnings appear on the clean input page", ((string)(null)), table54, "Then ");
>>>>>>> local
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days"});
            table49.AddRow(new string[] {
                        "100"});
<<<<<<< master
#line 373
 testRunner.When("I update clean parameter values", ((string)(null)), table49, "When ");
#line 376
=======
#line 399
 testRunner.When("I update clean parameter values", ((string)(null)), table55, "When ");
#line 402
>>>>>>> local
 testRunner.And("I save the clean parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table50.AddRow(new string[] {
                        "Branch is required!"});
<<<<<<< master
#line 377
 testRunner.Then("warnings appear on the clean input page", ((string)(null)), table50, "Then ");
#line 380
 testRunner.When("I select all the branches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 381
 testRunner.And("I click the Close button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 382
=======
#line 403
 testRunner.Then("warnings appear on the clean input page", ((string)(null)), table56, "Then ");
#line 406
 testRunner.When("I select all the branches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 407
 testRunner.And("I click the Close button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 408
>>>>>>> local
 testRunner.Then("the clean parameter is not saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
<<<<<<< master
=======
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Widget warning parameter add new")]
        public virtual void WidgetWarningParameterAddNew()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Widget warning parameter add new", ((string[])(null)));
#line 411
 this.ScenarioSetup(scenarioInfo);
#line 412
 testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 413
 testRunner.And("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Widget",
                        "Description"});
            table57.AddRow(new string[] {
                        "5",
                        "Exceptions",
                        "\'Test\'"});
#line 414
 testRunner.When("I add a widget warning parameter", ((string)(null)), table57, "When ");
#line 417
 testRunner.And("all branches are selected for the widget warning parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 418
 testRunner.And("I save the widget warning parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Widget",
                        "Branches"});
            table58.AddRow(new string[] {
                        "5",
                        "Exceptions",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
#line 419
 testRunner.Then("the widget warning parameter is saved", ((string)(null)), table58, "Then ");
#line 422
 testRunner.And("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 423
 testRunner.When("I select the widget warning tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Widget",
                        "Branches"});
            table59.AddRow(new string[] {
                        "5",
                        "Exceptions",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
#line 424
 testRunner.Then("the widget warning parameter is saved", ((string)(null)), table59, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Widget warning parameter remove")]
        public virtual void WidgetWarningParameterRemove()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Widget warning parameter remove", ((string[])(null)));
#line 428
this.ScenarioSetup(scenarioInfo);
#line 429
 testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 430
 testRunner.And("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Widget",
                        "Description"});
            table60.AddRow(new string[] {
                        "5",
                        "Exceptions",
                        "\'Test\'"});
#line 431
 testRunner.When("I add a widget warning parameter", ((string)(null)), table60, "When ");
#line 434
 testRunner.And("all branches are selected for the widget warning parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 435
 testRunner.And("I save the widget warning parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Widget",
                        "Branches"});
            table61.AddRow(new string[] {
                        "5",
                        "Exceptions",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
#line 436
 testRunner.Then("the widget warning parameter is saved", ((string)(null)), table61, "Then ");
#line 439
 testRunner.When("I remove the widget warning parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 440
 testRunner.Then("it is removed from the widget warning grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Widget warning parameter edit")]
        public virtual void WidgetWarningParameterEdit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Widget warning parameter edit", ((string[])(null)));
#line 442
this.ScenarioSetup(scenarioInfo);
#line 443
 testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 444
 testRunner.And("I navigate to the branch parameters page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Widget",
                        "Description"});
            table62.AddRow(new string[] {
                        "5",
                        "Exceptions",
                        "\'Test\'"});
#line 445
 testRunner.When("I add a widget warning parameter", ((string)(null)), table62, "When ");
#line 448
 testRunner.And("all branches are selected for the widget warning parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 449
 testRunner.And("I save the widget warning parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Widget",
                        "Branches"});
            table63.AddRow(new string[] {
                        "5",
                        "Exceptions",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
#line 450
 testRunner.Then("the widget warning parameter is saved", ((string)(null)), table63, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Widget",
                        "Branches"});
            table64.AddRow(new string[] {
                        "2",
                        "Exceptions",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
#line 453
 testRunner.When("I edit a widget warning parameter", ((string)(null)), table64, "When ");
#line 456
 testRunner.And("I update the widget warning parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Branches"});
            table65.AddRow(new string[] {
                        "2",
                        "med, cov, far, dun, lee, hem, bir, bel, bra, ply, bri, hay"});
#line 457
 testRunner.Then("the widget warning parameter is updated with id \'2\'", ((string)(null)), table65, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
>>>>>>> local
    }
}
#pragma warning restore
#endregion
