// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PH.Well.BDD.Features.Pages
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("RoutesPage")]
    [NUnit.Framework.CategoryAttribute("WebDriverFeature")]
    [NUnit.Framework.CategoryAttribute("RoleSuperUser")]
    public partial class RoutesPageFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RoutesPage.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "RoutesPage", "\tAs a User\r\n\tI wish to be able to view and filter route information\r\n\tso that i c" +
                    "an determine route progress", ProgrammingLanguage.CSharp, new string[] {
                        "WebDriverFeature",
                        "RoleSuperUser"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A user can view Route information")]
        public virtual void AUserCanViewRouteInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user can view Route information", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.And("I have loaded the Adam route data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("All the deliveries are marked as clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And("3 deliveries have been marked as exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("I have selected branch \'22\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.When("I open the routes page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Route",
                        "Branch",
                        "RouteDate",
                        "Driver",
                        "NoOfDrops",
                        "Exceptions",
                        "Clean",
                        "Status"});
            table1.AddRow(new string[] {
                        "001",
                        "22",
                        "Jan 7, 2016",
                        "HALL IAN",
                        "2",
                        "3",
                        "1",
                        ""});
            table1.AddRow(new string[] {
                        "006",
                        "22",
                        "Jan 7, 2016",
                        "RENTON MARK",
                        "2",
                        "0",
                        "4",
                        ""});
            table1.AddRow(new string[] {
                        "011",
                        "22",
                        "Jan 7, 2016",
                        "DUGDALE STEVEN",
                        "4",
                        "0",
                        "9",
                        ""});
#line 15
 testRunner.Then("The following routes will be displayed", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A user can filter Route information")]
        public virtual void AUserCanFilterRouteInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user can filter Route information", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
 testRunner.And("I have loaded the Adam route data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And("I have selected branch \'22\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.When("I open the routes page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.And("I filter the grid with the option \'Route\' and value \'001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Route",
                        "Branch",
                        "RouteDate",
                        "Driver",
                        "NoOfDrops",
                        "Exceptions",
                        "Clean",
                        "Status"});
            table2.AddRow(new string[] {
                        "001",
                        "22",
                        "Jan 7, 2016",
                        "HALL IAN",
                        "2",
                        "0",
                        "0",
                        ""});
#line 29
 testRunner.Then("The following routes will be displayed", ((string)(null)), table2, "Then ");
#line 32
 testRunner.When("I clear the filter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Route",
                        "Branch",
                        "RouteDate",
                        "Driver",
                        "NoOfDrops",
                        "Exceptions",
                        "Clean",
                        "Status"});
            table3.AddRow(new string[] {
                        "001",
                        "22",
                        "Jan 7, 2016",
                        "HALL IAN",
                        "2",
                        "0",
                        "0",
                        ""});
            table3.AddRow(new string[] {
                        "006",
                        "22",
                        "Jan 7, 2016",
                        "RENTON MARK",
                        "2",
                        "0",
                        "0",
                        ""});
            table3.AddRow(new string[] {
                        "011",
                        "22",
                        "Jan 7, 2016",
                        "DUGDALE STEVEN",
                        "4",
                        "0",
                        "0",
                        ""});
#line 33
 testRunner.Then("The following routes will be displayed", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A user can view Route information and sort on updated date")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("the")]
        [NUnit.Framework.CategoryAttribute("order")]
        [NUnit.Framework.CategoryAttribute("does")]
        [NUnit.Framework.CategoryAttribute("not")]
        [NUnit.Framework.CategoryAttribute("change")]
        public virtual void AUserCanViewRouteInformationAndSortOnUpdatedDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user can view Route information and sort on updated date", new string[] {
                        "ignore",
                        "the",
                        "order",
                        "does",
                        "not",
                        "change"});
#line 40
this.ScenarioSetup(scenarioInfo);
#line 41
 testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
 testRunner.And("I have loaded the Adam route data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("I have selected branch \'22\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.When("I open the routes page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Route",
                        "Branch",
                        "RouteDate",
                        "Driver",
                        "NoOfDrops",
                        "Exceptions",
                        "Clean",
                        "Status",
                        "LastUpdatedDate/time"});
            table4.AddRow(new string[] {
                        "011",
                        "22",
                        "Jan 7, 2016",
                        "DUGDALE STEVEN",
                        "4",
                        "0",
                        "0",
                        "Not Defined",
                        "Sep 8, 2016, 1:27:17 PM"});
            table4.AddRow(new string[] {
                        "006",
                        "22",
                        "Jan 7, 2016",
                        "RENTON MARK",
                        "2",
                        "0",
                        "0",
                        "Not Defined",
                        "Sep 8, 2016, 1:27:17 PM"});
            table4.AddRow(new string[] {
                        "001",
                        "22",
                        "Jan 7, 2016",
                        "HALL IAN",
                        "2",
                        "0",
                        "0",
                        "Not Defined",
                        "Sep 8, 2016, 1:27:16 PM"});
#line 45
 testRunner.Then("The following routes will be displayed", ((string)(null)), table4, "Then ");
#line 50
 testRunner.When("I click on the orderby Triangle image", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Route",
                        "Branch",
                        "Route Date",
                        "Driver",
                        "NoOfDrops",
                        "Exceptions",
                        "Clean",
                        "Status",
                        "LastUpdatedDateTime"});
            table5.AddRow(new string[] {
                        "001",
                        "22",
                        "Jan 7, 2016",
                        "HALL IAN",
                        "2",
                        "0",
                        "0",
                        "Not Defined",
                        "Sep 8, 2016, 1:27:16 PM"});
            table5.AddRow(new string[] {
                        "006",
                        "22",
                        "Jan 7, 2016",
                        "RENTON MARK",
                        "2",
                        "0",
                        "0",
                        "Not Defined",
                        "Sep 8, 2016, 1:27:17 PM"});
            table5.AddRow(new string[] {
                        "011",
                        "22",
                        "Jan 7, 2016",
                        "DUGDALE STEVEN",
                        "4",
                        "0",
                        "0",
                        "Not Defined",
                        "Sep 8, 2016, 1:27:17 PM"});
#line 51
 testRunner.Then("The following routes ordered by date will be displayed in \'desc\' order", ((string)(null)), table5, "Then ");
#line 56
 testRunner.When("I click on the orderby Triangle image", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Route",
                        "Branch",
                        "Route Date",
                        "Driver",
                        "NoOfDrops",
                        "Exceptions",
                        "Clean",
                        "Status",
                        "LastUpdatedDateTime"});
            table6.AddRow(new string[] {
                        "011",
                        "22",
                        "Jan 7, 2016",
                        "DUGDALE STEVEN",
                        "4",
                        "0",
                        "0",
                        "Not Defined",
                        "Sep 8, 2016, 1:27:17 PM"});
            table6.AddRow(new string[] {
                        "006",
                        "22",
                        "Jan 7, 2016",
                        "RENTON MARK",
                        "2",
                        "0",
                        "0",
                        "Not Defined",
                        "Sep 8, 2016, 1:27:17 PM"});
            table6.AddRow(new string[] {
                        "001",
                        "22",
                        "Jan 7, 2016",
                        "HALL IAN",
                        "2",
                        "0",
                        "0",
                        "Not Defined",
                        "Sep 8, 2016, 1:27:16 PM"});
#line 57
 testRunner.Then("The following routes ordered by date will be displayed in \'asc\' order", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A user can page through Route information")]
        public virtual void AUserCanPageThroughRouteInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user can page through Route information", ((string[])(null)));
#line 65
this.ScenarioSetup(scenarioInfo);
#line 66
 testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 67
 testRunner.And("I have loaded the Adam route data that has 21 lines", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.And("I have selected branch \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.When("I open the routes page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then("\'10\' rows of data will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 71
 testRunner.And("I will have 3 pages of data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.When("I click on page 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
 testRunner.Then("\'10\' rows of data will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 74
 testRunner.When("I click on page 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.Then("\'1\' rows of data will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 76
 testRunner.When("I click on page 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
 testRunner.Then("\'10\' rows of data will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A user can drill into a Route to view exceptions")]
        public virtual void AUserCanDrillIntoARouteToViewExceptions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user can drill into a Route to view exceptions", ((string[])(null)));
#line 80
this.ScenarioSetup(scenarioInfo);
#line 81
 testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 82
 testRunner.And("I have loaded the Adam route data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
 testRunner.And("All the deliveries are marked as exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
 testRunner.And("I have selected branch \'22\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.When("I open the routes page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 86
 testRunner.And("I select the first row of the route", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
 testRunner.And("I choose to view that routes exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.Then("I can see that routes exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 89
 testRunner.And("the filter should be preset to route and route number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A user can drill into a Route to view clean deliveries")]
        public virtual void AUserCanDrillIntoARouteToViewCleanDeliveries()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user can drill into a Route to view clean deliveries", ((string[])(null)));
#line 92
this.ScenarioSetup(scenarioInfo);
#line 93
 testRunner.Given("I have a clean database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 94
 testRunner.And("I have loaded the Adam route data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.And("All the deliveries are marked as clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.And("I have selected branch \'22\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.When("I open the routes page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 98
 testRunner.And("I select the first row of the route", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
 testRunner.And("I choose to view that routes clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
 testRunner.Then("I can see that routes clean deliveries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 101
 testRunner.And("the filter should be preset to route and route number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
